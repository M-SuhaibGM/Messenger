datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  accounts        Account[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessagesIds String[]       @db.ObjectId
  seenMessage     Message[]      @relation("Seen", fields: [seenMessagesIds], references: [id])
  messages        Message[]
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  Creater       String?
  isGroup       Boolean?
  messagesIds   String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  body           String?
  image          String?
  seenIds        String[]      @db.ObjectId
  seen           User[]        @relation("Seen", fields: [seenIds], references: [id])
  conversationId String        @db.ObjectId
  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String        @db.ObjectId
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
